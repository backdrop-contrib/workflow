<?php
/**
 * @file
 * Adds an 'Revert' link to the first workflow history row.
 */

/**
 * Implements hook_permission().
 */
function workflow_revert_permission() {
  return array(
    'revert workflow' => array(
      'title' => t('Revert workflow'),
      'description' => t('Allow user to revert workflow state.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function workflow_revert_menu() {
  $items = array();

  $items['workflow_revert'] = array(
    'title' => 'Workflow Undo',
    'file' => 'workflow_revert.pages.inc',
    'access arguments' => array('revert workflow'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('workflow_revert_form'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_rules_event_info().
 *
 * @todo: Add support for every entity_type in Revert rules.
 */
function workflow_revert_rules_event_info() {
  $events = array(
    'workflow_state_reverted' => array(
      'group' => t('Workflow'),
      'label' => t('Workflow state reverted'),
      'variables' => rules_events_node_variables(t('updated content'), TRUE),
    ),
  );
  return $events;
}

/**
 * Implements hook_workflow_history_alter().
 * Add an 'undo' operation for the most recent history change.
 *
 * @param $variables
 *   The current workflow history information as an array.
 *   'old_sid' - The state ID of the previous state.
 *   'old_state_name' - The state name of the previous state.
 *   'sid' - The state ID of the current state.
 *   'state_name' - The state name of the current state.
 *   'history' - The row from the workflow_node_history table.
 *   'transition' - a WorkflowTransition object, containing all of the above.
 *
 * If you want to add additional data, place it in the 'extra' value.
 */
function workflow_revert_workflow_history_alter(&$variables) {
  static $first = TRUE;

  $transition = $variables['transition'];

  // Only mark the first row.
  if ($first) {
    $old_sid = $transition->old_sid;
    $entity_type = $transition->entity_type;
    $entity = $transition->getEntity();
    $id = $transition->entity_id;
    $field_name = $transition->field_name;

    // Let's ask other modules if the reversion is allowed. Reversing old and new sid!
    $result = module_invoke_all('workflow', 'transition permitted', $transition->new_sid, $old_sid, $entity, FALSE);
    // Did anybody veto this choice?
    if (!in_array(FALSE, $result)) {
      // If not vetoed, mark it.
      $options = array('query' => array('token' => drupal_get_token('workflow_revert ' . $old_sid)));
      $path = 'workflow_revert/' . $entity_type . '/' . $id . '/' . $field_name . '/' . $old_sid;
      $variables['extra'] = l('Revert state change', $path, $options);

      $first = FALSE;
    }
  }
}
